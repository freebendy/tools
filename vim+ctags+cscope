linux源码：
    make tags
    make cscope

Vim 常用快捷键：
    4个方向:
       k
     h 0 l
       j

    ctrl+f, ctrl+b                 向下翻页，向上翻页
    ctrl+d, ctrl+u                 向下半翻页，向上半翻页
    $    移动行尾
    0    移动行首
    w    移动下一个词
    b    移动到上一个词
    )    移动光标到下一个句子
    (    移动光标到上一个句子
    gg   跳到文档的开始处
    G    跳到文档的末尾
    %    跳到匹配的括号处（"{ }""[]""()"）
    ctrl+i,tab                  跳到下一个jump point
    ctrl+o   跳到上一个jump point
    23gg, 23G, :23 跳到第23行
    H   移动光标到屏幕上面
    M   移动光标到屏幕中间
    L   移动光标到屏幕下面
    
    ma  再当前光标位置标记一个名字为a到比书签
    `a  跳转到书签a
    `.  跳转到上次编辑文件到地方

    查找替换:
        #  从光标向后查找整个关键词
        * 从光标向前查找整个关键词
        g# 从光标向后查找关键词
        g* 从光标向前查找关键词
        fx，tx，Fx，Tx    在当前行查找字符,x是要查找到字符,fx移动到当前行到下一个x处，tx和fx类似移动到x到左边一个位置，大写表示向上查找
    查找替换例子：
        : s/SEARCH/REPLACE
        : s/If/Since          将下一个"If"换成"Since"
        : %s/If/Since       将全部"If"换成"Since"
        : 1,3 s/If/Since/g  只对1,3行有效,如无前缀,只对当前行有效

    表达式:
        . 代替一个字符
        * 表示一个或多个字符的重复

    /d.*an 可以匹配 dan, divan, debian

    单词边界:
        指定单词边界: \< 和 \>
        如: /\<d[a-z]*an\>    匹配以d开始,中间包含任意个小写字母,以an结束的单词

        /\$[0-9]*\.[0-9][0-9] 匹配查找 $XX...X.XX这要的数字,有且只有两位小数的

    常用的编辑命令:
        a, i   在光标后插入, 在光标前插入
        dd  删除一行
        cc,S  删除一行后进入insert模式
        dw  删除一个单词
        D   剪切从光标位置到行尾到剪贴板。
        C   和D类似，最后进入插入模式。
        cw  删除一个单词后进入insert模式
        x,dl  删除一个字符
        s,cl  删除一个字符后进入insert模式

        p   粘贴
        ]p  和p的功能差不多，但是它会自动调整被粘贴的文本的缩进去适应当前代码的位置。
        xp  交换两个字符
        ddp  交换两行

        y  复制
        yy  复制一行
        Y   拷贝当前行。
        u  撤消
        ctrl+r   重做
        .  重复上一次修改

        >>  缩进所有选择的代码
        <<  和上面类似，但是反缩进

        K   在Man里面查找光标当前所在处的词。
 
    划分窗格:
        :split/vsplit                分隔一个窗口
        :new/vnew 创建一个新的窗口
        :sf {filename}            在新窗口中打开filename
        :close  关闭当前窗口
        :only  关闭除当前窗口外所有窗口
        :ctrl-w h      到左面的窗口
        :ctrl-w j      到下面的窗口
        :ctrl-w k      到上面的窗口
        :ctrl-w l      到右面的窗口
        :ctrl-w t      到顶部的窗口
        :ctrl-w b      到底部的窗口
 
    重复操作（宏操作）:
        q[a-z]  开始记录操作,记录到寄存器[a-z]中
        q  停止记录操作
        @[a-z]  执行寄存器中的操作
        @@  执行最近寄存器中记录的操作
        例子： 一个缓冲区有两行：
        sys/types.h
        stdio.h
        -->要改为：
        #include <sys/types.h>
        #include <stdio.h>
        操作如下：
        qa #开始记录
        ^ #移动行首
        i #进入insert模式
        #include < #输入内容
        $ #移动行尾
        i #进入insert模式
        > #输入内容
        q #停止记录

    移动另一行：
        @a即可执行相同的操作
 
    Visual Mode操作:
        ctrl+v                 进入基于块的可视模式
        v  进入基于字符的可视模式
        V  进入基于行的可视模式

        vwww 高亮光标前面到3个词
        Vjj  高亮当前行以及下面两行
        d    剪贴选择到内容到剪贴板
        y    拷贝选择到内容
        c    剪贴选择到内容到剪贴板并进入插入模式      
 
        c  删除选定的块
        I{string}<ESC> 选定块后按大写的I，输入字符串，再按ESC，可以在块内每一行插入相同的内容
 

    跳到声明处:
        [[  向前跳到顶格的第一个"{"
        []  向前跳到顶格的第一个"}"
        ][  向后跳到顶格的第一个"{"
        ]]  向后跳到顶格的第一个"}"
        [{  跳到本代码块(由{}界定)的开头
        [}  跳到本代码块的结尾

    Shell:
        :ctrl+z/suspend 在shell下是挂起vim; gui下是最小化窗口
        :!{command} 执行shell命令
        :shell  开一个新的shell
 
    保存vim状态(挂起?)：
        :mksession session.vim      保存当前vim状态
        :source session.vim         回复vim状态
        vim -S session.vim         启动vim时恢复session

cscope
    生成数据库：
        cscope -Rbq
    常用选项：
        -R: 在生成索引文件时，搜索子目录树中的代码
        -b: 只生成索引文件，不进入cscope的界面
        -q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度
        -k: 在生成索引文件时，不搜索/usr/include目录
        -i: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用”-“，表示由标准输入获得文件列表。
        -Idir: 在-I选项指出的目录中查找头文件
        -u: 扫描所有文件，重新生成交叉索引文件
        -C: 在搜索时忽略大小写
        -Ppath: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用它了。

    Cscope缺省只解析C文件(.c和.h)、lex文件(.l)和yacc文件(.y)，虽然它也可以支持C++以及Java，但它在扫描目录时会跳过C++及Java后缀的文件。如果你希望cscope解析C++或Java文件，需要把这些文件的名字和路径保存在一个名为cscope.files的文件。当cscope发现在当前目录中存在cscope.files时，就会为cscope.files中列出的所有文件生成索引数据库。
    例如
    find . –type f > cscope.files
    cscope -bq 
    
    vim支持8种cscope的查询功能(cscope find )，如下：
        s: 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
        g: 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
        d: 查找本函数调用的函数
        c: 查找调用本函数的函数
        t: 查找指定的字符串
        e: 查找egrep模式，相当于egrep功能，但查找速度快多了
        f: 查找并打开文件，类似vim的find功能
        i: 查找包含本文件的文件


ctags 常用快捷键 ：
    { 转到上一个空行
    } 转到下一个空行
    gd 转到当前光标所指的局部变量的定义
    * 转到当前光标所指的单词下一次出现的地方
    # 转到当前光标所指的单词上一次出现的地方
    ctrl+] 转到函数定义的地方
    ctrl+t 回退到函数调用的地方
    
taglist快捷键：
    <CR>          跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样  
      
    o             在一个新打开的窗口中显示光标下tag  
      
    <Space>       显示光标下tag的原型定义  
      
    u             更新taglist窗口中的tag  
      
    s             更改排序方式，在按名字排序和按出现顺序排序间切换  
      
    x             taglist窗口放大和缩小，方便查看较长的tag  
      
    +             打开一个折叠，同zoctags常用快捷键ctags常用快捷键  
      
    -             将tag折叠起来，同zc  
      
    *             打开所有的折叠，同zR  
      
    =             将所有tag折叠起来，同zM  
      
    [[            跳到前一个文件  
      
    ]]            跳到后一个文件  
      
    q             关闭taglist窗口  
